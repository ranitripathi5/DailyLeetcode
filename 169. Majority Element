class Solution {
    public int majorityElement(int[] nums) {
        int n=nums.length/2;
        Arrays.sort(nums);
        int i=0;
        while(i<nums.length){
           int count=1;
           int temp=nums[i];
           i++;
           while(i<nums.length&&nums[i]==temp){
               i++;
               count++;
           }
           if(count>n)return temp;
        }
        return -1;
    }
}
// the above approach takes O(nlogn) time cause we r sorting the array first


// the below solution works in O(n) time and keep in mind that the element always exists and we essentially will have that element's count>nums.length
class Solution {
    public int majorityElement(int[] nums) {
        int cand=nums[0];
        int count=1;
        int n=nums.length/2;
        for(int i=1;i<nums.length;i++){
            if(nums[i]==cand){
              count++;
            }else{
                count--;
                
                if(count==0){
                // this will not happen if the prev element was a majority element.
                    count=1;
                    cand=nums[i];
                }
            }
        }
        return cand;
    }
}
